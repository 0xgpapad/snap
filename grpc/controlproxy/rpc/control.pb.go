/*
http://www.apache.org/licenses/LICENSE-2.0.txt


Copyright 2016 Intel Corporation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go.
// source: github.com/intelsdi-x/snap/grpc/controlproxy/rpc/control.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	github.com/intelsdi-x/snap/grpc/controlproxy/rpc/control.proto

It has these top-level messages:
	SerrorReply
	PubProcMetricsRequest
	ErrorReply
	ProcessMetricsReply
	GetPluginContentTypesRequest
	GetPluginContentTypesReply
	ValidateDepsRequest
	ValidateDepsReply
	SubscribeDepsRequest
	SubscribeDepsReply
	Map
	MapEntry
	CollectMetricsRequest
	CollectMetricsResponse
	ExpandWildcardsRequest
	ArrString
	ExpandWildcardsReply
	GetAutodiscoverPathsReply
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/intelsdi-x/snap/grpc/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SerrorReply struct {
}

func (m *SerrorReply) Reset()                    { *m = SerrorReply{} }
func (m *SerrorReply) String() string            { return proto.CompactTextString(m) }
func (*SerrorReply) ProtoMessage()               {}
func (*SerrorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PubProcMetricsRequest struct {
	ContentType   string            `protobuf:"bytes,1,opt,name=ContentType" json:"ContentType,omitempty"`
	Content       []byte            `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	PluginName    string            `protobuf:"bytes,3,opt,name=PluginName" json:"PluginName,omitempty"`
	PluginVersion int64             `protobuf:"varint,4,opt,name=PluginVersion" json:"PluginVersion,omitempty"`
	Config        *common.ConfigMap `protobuf:"bytes,5,opt,name=Config" json:"Config,omitempty"`
	TaskId        string            `protobuf:"bytes,6,opt,name=TaskId" json:"TaskId,omitempty"`
}

func (m *PubProcMetricsRequest) Reset()                    { *m = PubProcMetricsRequest{} }
func (m *PubProcMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*PubProcMetricsRequest) ProtoMessage()               {}
func (*PubProcMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PubProcMetricsRequest) GetConfig() *common.ConfigMap {
	if m != nil {
		return m.Config
	}
	return nil
}

type ErrorReply struct {
	Errors []string `protobuf:"bytes,1,rep,name=Errors" json:"Errors,omitempty"`
}

func (m *ErrorReply) Reset()                    { *m = ErrorReply{} }
func (m *ErrorReply) String() string            { return proto.CompactTextString(m) }
func (*ErrorReply) ProtoMessage()               {}
func (*ErrorReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ProcessMetricsReply struct {
	ContentType string   `protobuf:"bytes,1,opt,name=ContentType" json:"ContentType,omitempty"`
	Content     []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	Errors      []string `protobuf:"bytes,3,rep,name=Errors" json:"Errors,omitempty"`
}

func (m *ProcessMetricsReply) Reset()                    { *m = ProcessMetricsReply{} }
func (m *ProcessMetricsReply) String() string            { return proto.CompactTextString(m) }
func (*ProcessMetricsReply) ProtoMessage()               {}
func (*ProcessMetricsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetPluginContentTypesRequest struct {
	Name       string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	PluginType int32  `protobuf:"varint,2,opt,name=PluginType" json:"PluginType,omitempty"`
	Version    int32  `protobuf:"varint,3,opt,name=Version" json:"Version,omitempty"`
}

func (m *GetPluginContentTypesRequest) Reset()                    { *m = GetPluginContentTypesRequest{} }
func (m *GetPluginContentTypesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPluginContentTypesRequest) ProtoMessage()               {}
func (*GetPluginContentTypesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetPluginContentTypesReply struct {
	AcceptedTypes []string `protobuf:"bytes,1,rep,name=AcceptedTypes" json:"AcceptedTypes,omitempty"`
	ReturnedTypes []string `protobuf:"bytes,2,rep,name=ReturnedTypes" json:"ReturnedTypes,omitempty"`
	Error         string   `protobuf:"bytes,3,opt,name=Error" json:"Error,omitempty"`
}

func (m *GetPluginContentTypesReply) Reset()                    { *m = GetPluginContentTypesReply{} }
func (m *GetPluginContentTypesReply) String() string            { return proto.CompactTextString(m) }
func (*GetPluginContentTypesReply) ProtoMessage()               {}
func (*GetPluginContentTypesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ValidateDepsRequest struct {
	Metrics []*common.Metric           `protobuf:"bytes,1,rep,name=Metrics" json:"Metrics,omitempty"`
	Plugins []*common.SubscribedPlugin `protobuf:"bytes,2,rep,name=Plugins" json:"Plugins,omitempty"`
}

func (m *ValidateDepsRequest) Reset()                    { *m = ValidateDepsRequest{} }
func (m *ValidateDepsRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateDepsRequest) ProtoMessage()               {}
func (*ValidateDepsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ValidateDepsRequest) GetMetrics() []*common.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *ValidateDepsRequest) GetPlugins() []*common.SubscribedPlugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type ValidateDepsReply struct {
	Errors []*common.SnapError `protobuf:"bytes,1,rep,name=Errors" json:"Errors,omitempty"`
}

func (m *ValidateDepsReply) Reset()                    { *m = ValidateDepsReply{} }
func (m *ValidateDepsReply) String() string            { return proto.CompactTextString(m) }
func (*ValidateDepsReply) ProtoMessage()               {}
func (*ValidateDepsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ValidateDepsReply) GetErrors() []*common.SnapError {
	if m != nil {
		return m.Errors
	}
	return nil
}

type SubscribeDepsRequest struct {
	Metrics []*common.Metric `protobuf:"bytes,1,rep,name=Metrics" json:"Metrics,omitempty"`
	Plugins []*common.Plugin `protobuf:"bytes,2,rep,name=Plugins" json:"Plugins,omitempty"`
	TaskId  string           `protobuf:"bytes,3,opt,name=TaskId" json:"TaskId,omitempty"`
}

func (m *SubscribeDepsRequest) Reset()                    { *m = SubscribeDepsRequest{} }
func (m *SubscribeDepsRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeDepsRequest) ProtoMessage()               {}
func (*SubscribeDepsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SubscribeDepsRequest) GetMetrics() []*common.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *SubscribeDepsRequest) GetPlugins() []*common.Plugin {
	if m != nil {
		return m.Plugins
	}
	return nil
}

type SubscribeDepsReply struct {
	Errors []*common.SnapError `protobuf:"bytes,1,rep,name=Errors" json:"Errors,omitempty"`
}

func (m *SubscribeDepsReply) Reset()                    { *m = SubscribeDepsReply{} }
func (m *SubscribeDepsReply) String() string            { return proto.CompactTextString(m) }
func (*SubscribeDepsReply) ProtoMessage()               {}
func (*SubscribeDepsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SubscribeDepsReply) GetErrors() []*common.SnapError {
	if m != nil {
		return m.Errors
	}
	return nil
}

type Map struct {
	Entries []*MapEntry `protobuf:"bytes,1,rep,name=Entries" json:"Entries,omitempty"`
}

func (m *Map) Reset()                    { *m = Map{} }
func (m *Map) String() string            { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()               {}
func (*Map) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Map) GetEntries() []*MapEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type MapEntry struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *MapEntry) Reset()                    { *m = MapEntry{} }
func (m *MapEntry) String() string            { return proto.CompactTextString(m) }
func (*MapEntry) ProtoMessage()               {}
func (*MapEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type CollectMetricsRequest struct {
	TaskID   string           `protobuf:"bytes,1,opt,name=TaskID" json:"TaskID,omitempty"`
	Metrics  []*common.Metric `protobuf:"bytes,2,rep,name=Metrics" json:"Metrics,omitempty"`
	Deadline *common.Time     `protobuf:"bytes,3,opt,name=Deadline" json:"Deadline,omitempty"`
	AllTags  map[string]*Map  `protobuf:"bytes,4,rep,name=AllTags" json:"AllTags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CollectMetricsRequest) Reset()                    { *m = CollectMetricsRequest{} }
func (m *CollectMetricsRequest) String() string            { return proto.CompactTextString(m) }
func (*CollectMetricsRequest) ProtoMessage()               {}
func (*CollectMetricsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CollectMetricsRequest) GetMetrics() []*common.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *CollectMetricsRequest) GetDeadline() *common.Time {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func (m *CollectMetricsRequest) GetAllTags() map[string]*Map {
	if m != nil {
		return m.AllTags
	}
	return nil
}

type CollectMetricsResponse struct {
	Metrics []*common.Metric `protobuf:"bytes,1,rep,name=Metrics" json:"Metrics,omitempty"`
	Errors  []string         `protobuf:"bytes,2,rep,name=Errors" json:"Errors,omitempty"`
}

func (m *CollectMetricsResponse) Reset()                    { *m = CollectMetricsResponse{} }
func (m *CollectMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*CollectMetricsResponse) ProtoMessage()               {}
func (*CollectMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CollectMetricsResponse) GetMetrics() []*common.Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type ExpandWildcardsRequest struct {
	Namespace []*common.NamespaceElement `protobuf:"bytes,1,rep,name=Namespace" json:"Namespace,omitempty"`
}

func (m *ExpandWildcardsRequest) Reset()                    { *m = ExpandWildcardsRequest{} }
func (m *ExpandWildcardsRequest) String() string            { return proto.CompactTextString(m) }
func (*ExpandWildcardsRequest) ProtoMessage()               {}
func (*ExpandWildcardsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ExpandWildcardsRequest) GetNamespace() []*common.NamespaceElement {
	if m != nil {
		return m.Namespace
	}
	return nil
}

type ArrString struct {
	S []*common.NamespaceElement `protobuf:"bytes,1,rep,name=S" json:"S,omitempty"`
}

func (m *ArrString) Reset()                    { *m = ArrString{} }
func (m *ArrString) String() string            { return proto.CompactTextString(m) }
func (*ArrString) ProtoMessage()               {}
func (*ArrString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ArrString) GetS() []*common.NamespaceElement {
	if m != nil {
		return m.S
	}
	return nil
}

type ExpandWildcardsReply struct {
	NSS   []*ArrString      `protobuf:"bytes,1,rep,name=NSS" json:"NSS,omitempty"`
	Error *common.SnapError `protobuf:"bytes,2,opt,name=Error" json:"Error,omitempty"`
}

func (m *ExpandWildcardsReply) Reset()                    { *m = ExpandWildcardsReply{} }
func (m *ExpandWildcardsReply) String() string            { return proto.CompactTextString(m) }
func (*ExpandWildcardsReply) ProtoMessage()               {}
func (*ExpandWildcardsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ExpandWildcardsReply) GetNSS() []*ArrString {
	if m != nil {
		return m.NSS
	}
	return nil
}

func (m *ExpandWildcardsReply) GetError() *common.SnapError {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetAutodiscoverPathsReply struct {
	Paths []string `protobuf:"bytes,1,rep,name=Paths" json:"Paths,omitempty"`
}

func (m *GetAutodiscoverPathsReply) Reset()                    { *m = GetAutodiscoverPathsReply{} }
func (m *GetAutodiscoverPathsReply) String() string            { return proto.CompactTextString(m) }
func (*GetAutodiscoverPathsReply) ProtoMessage()               {}
func (*GetAutodiscoverPathsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func init() {
	proto.RegisterType((*SerrorReply)(nil), "rpc.SerrorReply")
	proto.RegisterType((*PubProcMetricsRequest)(nil), "rpc.PubProcMetricsRequest")
	proto.RegisterType((*ErrorReply)(nil), "rpc.ErrorReply")
	proto.RegisterType((*ProcessMetricsReply)(nil), "rpc.ProcessMetricsReply")
	proto.RegisterType((*GetPluginContentTypesRequest)(nil), "rpc.GetPluginContentTypesRequest")
	proto.RegisterType((*GetPluginContentTypesReply)(nil), "rpc.GetPluginContentTypesReply")
	proto.RegisterType((*ValidateDepsRequest)(nil), "rpc.ValidateDepsRequest")
	proto.RegisterType((*ValidateDepsReply)(nil), "rpc.ValidateDepsReply")
	proto.RegisterType((*SubscribeDepsRequest)(nil), "rpc.SubscribeDepsRequest")
	proto.RegisterType((*SubscribeDepsReply)(nil), "rpc.SubscribeDepsReply")
	proto.RegisterType((*Map)(nil), "rpc.Map")
	proto.RegisterType((*MapEntry)(nil), "rpc.MapEntry")
	proto.RegisterType((*CollectMetricsRequest)(nil), "rpc.CollectMetricsRequest")
	proto.RegisterType((*CollectMetricsResponse)(nil), "rpc.CollectMetricsResponse")
	proto.RegisterType((*ExpandWildcardsRequest)(nil), "rpc.ExpandWildcardsRequest")
	proto.RegisterType((*ArrString)(nil), "rpc.ArrString")
	proto.RegisterType((*ExpandWildcardsReply)(nil), "rpc.ExpandWildcardsReply")
	proto.RegisterType((*GetAutodiscoverPathsReply)(nil), "rpc.GetAutodiscoverPathsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for MetricManager service

type MetricManagerClient interface {
	// managesMetrics from scheduler
	GetPluginContentTypes(ctx context.Context, in *GetPluginContentTypesRequest, opts ...grpc.CallOption) (*GetPluginContentTypesReply, error)
	ExpandWildcards(ctx context.Context, in *ExpandWildcardsRequest, opts ...grpc.CallOption) (*ExpandWildcardsReply, error)
	CollectMetrics(ctx context.Context, in *CollectMetricsRequest, opts ...grpc.CallOption) (*CollectMetricsResponse, error)
	PublishMetrics(ctx context.Context, in *PubProcMetricsRequest, opts ...grpc.CallOption) (*ErrorReply, error)
	ProcessMetrics(ctx context.Context, in *PubProcMetricsRequest, opts ...grpc.CallOption) (*ProcessMetricsReply, error)
	ValidateDeps(ctx context.Context, in *ValidateDepsRequest, opts ...grpc.CallOption) (*ValidateDepsReply, error)
	SubscribeDeps(ctx context.Context, in *SubscribeDepsRequest, opts ...grpc.CallOption) (*SubscribeDepsReply, error)
	UnsubscribeDeps(ctx context.Context, in *SubscribeDepsRequest, opts ...grpc.CallOption) (*SubscribeDepsReply, error)
	MatchQueryToNamespaces(ctx context.Context, in *ExpandWildcardsRequest, opts ...grpc.CallOption) (*ExpandWildcardsReply, error)
	GetAutodiscoverPaths(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAutodiscoverPathsReply, error)
}

type metricManagerClient struct {
	cc *grpc.ClientConn
}

func NewMetricManagerClient(cc *grpc.ClientConn) MetricManagerClient {
	return &metricManagerClient{cc}
}

func (c *metricManagerClient) GetPluginContentTypes(ctx context.Context, in *GetPluginContentTypesRequest, opts ...grpc.CallOption) (*GetPluginContentTypesReply, error) {
	out := new(GetPluginContentTypesReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/GetPluginContentTypes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) ExpandWildcards(ctx context.Context, in *ExpandWildcardsRequest, opts ...grpc.CallOption) (*ExpandWildcardsReply, error) {
	out := new(ExpandWildcardsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/ExpandWildcards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) CollectMetrics(ctx context.Context, in *CollectMetricsRequest, opts ...grpc.CallOption) (*CollectMetricsResponse, error) {
	out := new(CollectMetricsResponse)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/CollectMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) PublishMetrics(ctx context.Context, in *PubProcMetricsRequest, opts ...grpc.CallOption) (*ErrorReply, error) {
	out := new(ErrorReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/PublishMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) ProcessMetrics(ctx context.Context, in *PubProcMetricsRequest, opts ...grpc.CallOption) (*ProcessMetricsReply, error) {
	out := new(ProcessMetricsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/ProcessMetrics", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) ValidateDeps(ctx context.Context, in *ValidateDepsRequest, opts ...grpc.CallOption) (*ValidateDepsReply, error) {
	out := new(ValidateDepsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/ValidateDeps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) SubscribeDeps(ctx context.Context, in *SubscribeDepsRequest, opts ...grpc.CallOption) (*SubscribeDepsReply, error) {
	out := new(SubscribeDepsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/SubscribeDeps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) UnsubscribeDeps(ctx context.Context, in *SubscribeDepsRequest, opts ...grpc.CallOption) (*SubscribeDepsReply, error) {
	out := new(SubscribeDepsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/UnsubscribeDeps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) MatchQueryToNamespaces(ctx context.Context, in *ExpandWildcardsRequest, opts ...grpc.CallOption) (*ExpandWildcardsReply, error) {
	out := new(ExpandWildcardsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/MatchQueryToNamespaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricManagerClient) GetAutodiscoverPaths(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*GetAutodiscoverPathsReply, error) {
	out := new(GetAutodiscoverPathsReply)
	err := grpc.Invoke(ctx, "/rpc.MetricManager/GetAutodiscoverPaths", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MetricManager service

type MetricManagerServer interface {
	// managesMetrics from scheduler
	GetPluginContentTypes(context.Context, *GetPluginContentTypesRequest) (*GetPluginContentTypesReply, error)
	ExpandWildcards(context.Context, *ExpandWildcardsRequest) (*ExpandWildcardsReply, error)
	CollectMetrics(context.Context, *CollectMetricsRequest) (*CollectMetricsResponse, error)
	PublishMetrics(context.Context, *PubProcMetricsRequest) (*ErrorReply, error)
	ProcessMetrics(context.Context, *PubProcMetricsRequest) (*ProcessMetricsReply, error)
	ValidateDeps(context.Context, *ValidateDepsRequest) (*ValidateDepsReply, error)
	SubscribeDeps(context.Context, *SubscribeDepsRequest) (*SubscribeDepsReply, error)
	UnsubscribeDeps(context.Context, *SubscribeDepsRequest) (*SubscribeDepsReply, error)
	MatchQueryToNamespaces(context.Context, *ExpandWildcardsRequest) (*ExpandWildcardsReply, error)
	GetAutodiscoverPaths(context.Context, *common.Empty) (*GetAutodiscoverPathsReply, error)
}

func RegisterMetricManagerServer(s *grpc.Server, srv MetricManagerServer) {
	s.RegisterService(&_MetricManager_serviceDesc, srv)
}

func _MetricManager_GetPluginContentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginContentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).GetPluginContentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/GetPluginContentTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).GetPluginContentTypes(ctx, req.(*GetPluginContentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_ExpandWildcards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandWildcardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).ExpandWildcards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/ExpandWildcards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).ExpandWildcards(ctx, req.(*ExpandWildcardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_CollectMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).CollectMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/CollectMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).CollectMetrics(ctx, req.(*CollectMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_PublishMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubProcMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).PublishMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/PublishMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).PublishMetrics(ctx, req.(*PubProcMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_ProcessMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubProcMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).ProcessMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/ProcessMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).ProcessMetrics(ctx, req.(*PubProcMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_ValidateDeps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateDepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).ValidateDeps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/ValidateDeps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).ValidateDeps(ctx, req.(*ValidateDepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_SubscribeDeps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeDepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).SubscribeDeps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/SubscribeDeps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).SubscribeDeps(ctx, req.(*SubscribeDepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_UnsubscribeDeps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeDepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).UnsubscribeDeps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/UnsubscribeDeps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).UnsubscribeDeps(ctx, req.(*SubscribeDepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_MatchQueryToNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpandWildcardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).MatchQueryToNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/MatchQueryToNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).MatchQueryToNamespaces(ctx, req.(*ExpandWildcardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricManager_GetAutodiscoverPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricManagerServer).GetAutodiscoverPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.MetricManager/GetAutodiscoverPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricManagerServer).GetAutodiscoverPaths(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MetricManager",
	HandlerType: (*MetricManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPluginContentTypes",
			Handler:    _MetricManager_GetPluginContentTypes_Handler,
		},
		{
			MethodName: "ExpandWildcards",
			Handler:    _MetricManager_ExpandWildcards_Handler,
		},
		{
			MethodName: "CollectMetrics",
			Handler:    _MetricManager_CollectMetrics_Handler,
		},
		{
			MethodName: "PublishMetrics",
			Handler:    _MetricManager_PublishMetrics_Handler,
		},
		{
			MethodName: "ProcessMetrics",
			Handler:    _MetricManager_ProcessMetrics_Handler,
		},
		{
			MethodName: "ValidateDeps",
			Handler:    _MetricManager_ValidateDeps_Handler,
		},
		{
			MethodName: "SubscribeDeps",
			Handler:    _MetricManager_SubscribeDeps_Handler,
		},
		{
			MethodName: "UnsubscribeDeps",
			Handler:    _MetricManager_UnsubscribeDeps_Handler,
		},
		{
			MethodName: "MatchQueryToNamespaces",
			Handler:    _MetricManager_MatchQueryToNamespaces_Handler,
		},
		{
			MethodName: "GetAutodiscoverPaths",
			Handler:    _MetricManager_GetAutodiscoverPaths_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() {
	proto.RegisterFile("github.com/intelsdi-x/snap/grpc/controlproxy/rpc/control.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0xb5, 0xc4, 0x48, 0xb2, 0x87, 0xba, 0x20, 0x6b, 0x5b, 0x61, 0xe8, 0xc0, 0x8e, 0x59, 0xf4,
	0x8e, 0x4a, 0x85, 0x02, 0xb4, 0x46, 0x1f, 0x5a, 0xa8, 0xb1, 0xe0, 0x06, 0x86, 0x02, 0x45, 0x52,
	0x52, 0xf4, 0xa1, 0x0f, 0x2b, 0x72, 0x2b, 0x11, 0xa1, 0x48, 0x76, 0x77, 0x19, 0x58, 0xef, 0xfd,
	0x8b, 0xfe, 0x5a, 0x3f, 0xa6, 0x7b, 0x21, 0xa9, 0x4b, 0x18, 0xdb, 0x45, 0xf3, 0x64, 0x73, 0x66,
	0xf6, 0xec, 0x99, 0xcb, 0x99, 0x15, 0xfc, 0x38, 0xf7, 0xf9, 0x22, 0x99, 0x75, 0xdc, 0x68, 0xd9,
	0xf5, 0x43, 0x4e, 0x02, 0xe6, 0xf9, 0xdf, 0xdc, 0x74, 0x59, 0x88, 0xe3, 0xee, 0x9c, 0xc6, 0x6e,
	0xd7, 0x8d, 0x42, 0x4e, 0xa3, 0x20, 0xa6, 0xd1, 0xcd, 0xaa, 0xbb, 0x61, 0xe8, 0x08, 0x0b, 0x8f,
	0x90, 0x21, 0x4c, 0xf6, 0xb3, 0xbb, 0x41, 0x96, 0xcb, 0x28, 0x4c, 0xff, 0xe8, 0x93, 0x4e, 0x03,
	0xcc, 0x09, 0xa1, 0x34, 0xa2, 0x63, 0x12, 0x07, 0x2b, 0xe7, 0xef, 0x12, 0x1c, 0x8f, 0x92, 0xd9,
	0x88, 0x46, 0xee, 0x90, 0x70, 0xea, 0xbb, 0x6c, 0x4c, 0xfe, 0x4c, 0x08, 0xe3, 0xe8, 0x10, 0xcc,
	0xe7, 0xe2, 0x4e, 0x12, 0xf2, 0xe9, 0x2a, 0x26, 0x56, 0xe9, 0x69, 0xe9, 0x8b, 0x03, 0xd4, 0x82,
	0x5a, 0x6a, 0xb4, 0xca, 0xc2, 0x50, 0x47, 0x08, 0x60, 0x14, 0x24, 0x73, 0x3f, 0x7c, 0x89, 0x97,
	0xc4, 0x32, 0x54, 0xd0, 0x31, 0x34, 0xb4, 0xed, 0x0d, 0xa1, 0xcc, 0x8f, 0x42, 0xeb, 0x81, 0x30,
	0x1b, 0xe8, 0x1c, 0xaa, 0xe2, 0xec, 0x1f, 0xfe, 0xdc, 0xaa, 0x88, 0x6f, 0xb3, 0xf7, 0xb0, 0x93,
	0x12, 0xd3, 0xd6, 0x21, 0x8e, 0x51, 0x13, 0xaa, 0x53, 0xcc, 0xde, 0xbe, 0xf0, 0xac, 0xaa, 0x44,
	0x72, 0x9e, 0x00, 0x0c, 0x72, 0xae, 0xd2, 0xab, 0xbe, 0x98, 0x20, 0x63, 0x08, 0xef, 0x35, 0x1c,
	0x4a, 0xde, 0x84, 0xb1, 0x9c, 0xba, 0x0c, 0xbb, 0x1f, 0xf1, 0x35, 0x98, 0xa1, 0xc0, 0x5e, 0xc1,
	0x93, 0x2b, 0xc2, 0x35, 0xef, 0x8d, 0xe3, 0x79, 0x39, 0xea, 0xf0, 0x40, 0xa5, 0xa8, 0xe1, 0xf2,
	0xb4, 0xd5, 0x15, 0x12, 0xb1, 0x22, 0xaf, 0xc8, 0x12, 0x96, 0x75, 0xa8, 0x38, 0xbf, 0x81, 0xfd,
	0x01, 0x48, 0x49, 0x53, 0x54, 0xa9, 0xef, 0xba, 0x24, 0xe6, 0xc4, 0x53, 0x56, 0x9d, 0x94, 0x34,
	0x8f, 0x09, 0x4f, 0x68, 0x98, 0x99, 0xcb, 0xca, 0xdc, 0x80, 0x8a, 0xa2, 0xab, 0x4b, 0xec, 0x60,
	0x38, 0x7c, 0x83, 0x03, 0xdf, 0xc3, 0x9c, 0x5c, 0x92, 0x38, 0x27, 0x79, 0x06, 0xb5, 0xb4, 0x14,
	0x0a, 0xcd, 0xec, 0x35, 0xb3, 0x1a, 0x6b, 0x33, 0xfa, 0x12, 0x6a, 0x9a, 0x8f, 0xc6, 0x35, 0x7b,
	0x56, 0x16, 0x30, 0x49, 0x66, 0xcc, 0xa5, 0xfe, 0x8c, 0x78, 0x3a, 0xc0, 0xf9, 0x0e, 0x1e, 0x6e,
	0x5f, 0x21, 0x49, 0x9f, 0x6f, 0xb5, 0x60, 0xa3, 0x87, 0x13, 0x31, 0x74, 0xca, 0xe3, 0x2c, 0xe0,
	0x28, 0xc7, 0xfa, 0x4f, 0xdc, 0xce, 0x76, 0xb9, 0xe5, 0x01, 0xda, 0xbc, 0x31, 0x1d, 0xba, 0x08,
	0xdf, 0x03, 0xda, 0xb9, 0xe9, 0x9e, 0x14, 0x3f, 0x05, 0x43, 0x4e, 0xdb, 0x29, 0xd4, 0x06, 0x42,
	0x54, 0x3e, 0xc9, 0x42, 0x1b, 0x1d, 0xa1, 0x9a, 0x8e, 0x70, 0x49, 0xf3, 0xca, 0xf9, 0x0c, 0xf6,
	0xb3, 0xff, 0x91, 0x09, 0xc6, 0x35, 0x59, 0xa5, 0xdd, 0x17, 0xcd, 0x10, 0xa5, 0x49, 0x74, 0xe3,
	0x0f, 0x9c, 0x7f, 0x84, 0x86, 0x9e, 0x47, 0x41, 0x40, 0x5c, 0xbe, 0xa3, 0xa1, 0x8c, 0xf1, 0x65,
	0x7a, 0x70, 0xa3, 0x06, 0xe5, 0xc2, 0x1a, 0x9c, 0xc2, 0xfe, 0x25, 0xc1, 0x5e, 0xe0, 0x87, 0x5a,
	0x4c, 0x66, 0xaf, 0x9e, 0x45, 0x4c, 0xfd, 0x25, 0x41, 0x17, 0x50, 0xeb, 0x07, 0xc1, 0x14, 0xcf,
	0x99, 0x10, 0x95, 0x04, 0xf8, 0x5c, 0x51, 0x2e, 0xbc, 0xbd, 0x93, 0x46, 0xaa, 0x04, 0xec, 0x0b,
	0xa8, 0x6f, 0x7e, 0xcb, 0x84, 0xde, 0xe6, 0x09, 0x3d, 0x82, 0xca, 0xbb, 0x3c, 0x21, 0xb3, 0xb7,
	0x9f, 0xd5, 0xe1, 0x87, 0xf2, 0x45, 0xc9, 0x79, 0x01, 0xed, 0x5d, 0x7c, 0x16, 0x47, 0x21, 0x23,
	0x77, 0xb7, 0x74, 0x2d, 0x32, 0x35, 0xc5, 0xce, 0x00, 0xda, 0x83, 0x9b, 0x18, 0x87, 0xde, 0xaf,
	0x7e, 0xe0, 0xb9, 0x98, 0x7a, 0x79, 0xa5, 0xbe, 0x86, 0x03, 0x29, 0x2f, 0x16, 0x63, 0x97, 0xa4,
	0x60, 0xf9, 0x68, 0xe6, 0x8e, 0x41, 0x40, 0x96, 0x42, 0x44, 0xce, 0xb7, 0x70, 0xd0, 0xa7, 0x74,
	0x22, 0xae, 0x08, 0xe7, 0xe8, 0x13, 0x28, 0x4d, 0xee, 0x3c, 0xf1, 0x1a, 0x8e, 0xde, 0xbb, 0x58,
	0x0e, 0xcb, 0x09, 0x18, 0x2f, 0x27, 0x93, 0x9c, 0xbd, 0x4c, 0x7b, 0x8d, 0xfc, 0x34, 0xd3, 0x5c,
	0x79, 0x7b, 0x5f, 0xad, 0x07, 0xe9, 0x2b, 0x78, 0x2c, 0x14, 0xde, 0x4f, 0x78, 0xe4, 0xf9, 0xcc,
	0x8d, 0xde, 0x11, 0x3a, 0xc2, 0x7c, 0x91, 0x62, 0x8b, 0x29, 0x51, 0x5f, 0x5a, 0xd8, 0xbd, 0xbf,
	0xaa, 0xd0, 0xd0, 0x65, 0x19, 0xe2, 0x10, 0xcf, 0x09, 0x45, 0xbf, 0xc3, 0x71, 0xe1, 0x7e, 0x40,
	0xe7, 0x8a, 0xc8, 0x6d, 0xeb, 0xc8, 0x3e, 0xbb, 0x2d, 0x44, 0x2e, 0xf6, 0x3d, 0x74, 0x0d, 0xad,
	0x9d, 0x9c, 0xd1, 0x89, 0x3a, 0x55, 0xdc, 0x02, 0xfb, 0x71, 0xb1, 0x33, 0x03, 0x6b, 0x6e, 0x0f,
	0x01, 0xb2, 0x3f, 0x3c, 0x79, 0xf6, 0x49, 0xa1, 0x4f, 0x4f, 0x8d, 0x00, 0xfb, 0x09, 0x9a, 0xe2,
	0xcd, 0x09, 0x7c, 0xb6, 0xd8, 0x06, 0x2b, 0x7c, 0x88, 0xec, 0x96, 0xe6, 0xb5, 0x7e, 0xb3, 0xf6,
	0xd0, 0x2f, 0x02, 0x60, 0x6b, 0xf3, 0xdf, 0x0a, 0x60, 0x69, 0xdf, 0xfb, 0x4f, 0x85, 0x40, 0xfa,
	0x19, 0xea, 0x9b, 0x5b, 0x0e, 0xe9, 0xd8, 0x82, 0xdd, 0x6a, 0xb7, 0x0b, 0x3c, 0x1a, 0x63, 0x00,
	0x8d, 0xad, 0x3d, 0x84, 0x74, 0x25, 0x8b, 0xb6, 0xa0, 0xfd, 0xa8, 0xc8, 0xa5, 0x61, 0xae, 0xa0,
	0xf5, 0x3a, 0x64, 0x1f, 0x01, 0x68, 0x0c, 0xed, 0x21, 0xe6, 0xee, 0xe2, 0x55, 0x42, 0xe8, 0x6a,
	0x1a, 0xe5, 0x62, 0xf8, 0x3f, 0xfd, 0xbf, 0x82, 0xa3, 0xa2, 0x49, 0x47, 0x8d, 0x4c, 0x14, 0x83,
	0x65, 0xcc, 0x57, 0xf6, 0x69, 0x36, 0x96, 0xc5, 0x9a, 0x70, 0xf6, 0x66, 0x55, 0xf5, 0x33, 0xe4,
	0xd9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x88, 0x96, 0x25, 0x04, 0x02, 0x09, 0x00, 0x00,
}
