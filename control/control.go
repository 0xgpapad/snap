package control

import (
	// "crypto/rand"
	"crypto/rsa"
	"encoding/json"
	"log"
	"os"
	"os/exec"
	"time"
)

// control private key (RSA private key)
// control public key (RSA public key)
// Plugin token = token generated by plugin and passed to control
// Session token = plugin seed encrypted by control private key, verified by plugin using control public key
//

type pluginControl struct {
	controlPrivKey *rsa.PrivateKey
	controlPubKey  *rsa.PublicKey
}

type PluginArgs struct {
	PluginLogPath string
	ControlPubKey *rsa.PublicKey
}

func (p *pluginControl) GenerateArgs() PluginArgs {
	a := PluginArgs{ControlPubKey: p.controlPubKey, PluginLogPath: "/tmp"}
	return a
}

func Control() *pluginControl {
	c := new(pluginControl)
	// privatekey, err := rsa.GenerateKey(rand.Reader, 4096)

	// if err != nil {
	// 	panic(err)
	// }

	// // Future use for securing.
	// c.controlPrivKey = privatekey
	// c.controlPubKey = &privatekey.PublicKey

	return c
}

func (p *pluginControl) Load(path string) {
	log.Printf("Attempting to load: %s\v", path)
	// Start plugin passing control details and receiving response

	x, e := json.Marshal(p.GenerateArgs())
	if e != nil {
		panic(e)
	}
	log.Println(string(x))

	cmd := new(exec.Cmd)
	cmd.Path = path
	cmd.Args = []string{path, string(x)}
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stdout

	err := cmd.Start()
	if err != nil {
		panic(err)
	}

	go func() {
		// How long to wait for testing for killing
		time.Sleep(time.Second * 1)
		cmd.Process.Kill()
	}()

	cmd.Wait()

	// Ping

	// Plugin
}
